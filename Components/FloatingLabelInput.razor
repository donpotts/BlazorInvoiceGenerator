<div class="relative">
    <input
        type="@Type"
        id="@Id"
        name="@Name"
        class="block px-2.5 pb-2.5 pt-4 w-full text-sm text-gray-900 bg-transparent rounded-lg border border-gray-300 appearance-none focus:outline-none focus:ring-0 focus:border-blue-600 peer @ClassName"
        placeholder=" "
        value="@Value"
        @oninput="OnInputChange"
        disabled="@Disabled"
        autocomplete="off"
        spellcheck="false"
        aria-autocomplete="none"
    />
    <label
        for="@Id"
        class="absolute text-sm text-gray-500 duration-300 transform -translate-y-4 scale-75 top-2 z-10 origin-[0] bg-white px-2 peer-focus:px-2 peer-focus:text-blue-600 peer-placeholder-shown:scale-100 peer-placeholder-shown:-translate-y-1/2 peer-placeholder-shown:top-1/2 peer-focus:top-2 peer-focus:scale-75 peer-focus:-translate-y-4 left-1"
    >
        @Label
    </label>
</div>

@code {
    [Parameter] public string Id { get; set; }
    [Parameter] public string Label { get; set; }
    [Parameter] public string Type { get; set; } = "text";
    [Parameter] public string Value { get; set; }
    [Parameter] public EventCallback<string> OnChange { get; set; }
    [Parameter] public string Name { get; set; }
    [Parameter] public string ClassName { get; set; } = string.Empty;
    [Parameter] public bool Disabled { get; set; } = false;

    private async Task OnInputChange(ChangeEventArgs e)
    {
        await OnChange.InvokeAsync(e.Value?.ToString());
    }
}
